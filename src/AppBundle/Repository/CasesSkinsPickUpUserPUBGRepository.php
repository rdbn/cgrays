<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;

/**
 * CasesSkinsPickUpUserPUBGRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class CasesSkinsPickUpUserPUBGRepository extends EntityRepository
{
    /**
     * @param $ids
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findSkinsForUpdateByIds($ids)
    {
        $dbal = $this->getEntityManager()->getConnection();
        $stmt = $dbal->prepare("
        SELECT cspuu.* FROM cases_skins_pick_up_user_pubg cspuu WHERE cspuu.id IN (:ids) FOR UPDATE
        ");
        $stmt->bindParam('ids', $ids, \PDO::PARAM_STR);
        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }

    /**
     * @param $domainId
     * @param $userId
     * @return \Doctrine\DBAL\Query\QueryBuilder
     */
    public function queryPaginationByDomainIdAndUserId($domainId, $userId)
    {
        $dbal = $this->getEntityManager()->getConnection();
        $qb = $dbal->createQueryBuilder();
        $qb
            ->addSelect('cspuu.id')
            ->addSelect('s.name as skin_name')
            ->addSelect('s.image as steam_image')
            ->addSelect('s.steam_price as price')
            ->addSelect('s.rarity_id')
            ->from('cases_skins_pick_up_user_pubg', 'cspuu')
            ->leftJoin('cspuu', 'skins_pubg', 's', 'cspuu.skins_id = s.id')
            ->leftJoin('cspuu', 'cases_domain', 'cd', 'cspuu.cases_domain_id = cd.id')
            ->andWhere($qb->expr()->eq('cspuu.user_id', $userId))
            ->andWhere($qb->expr()->eq('cd.uuid', "'{$domainId}'"))
            ->orderBy('cspuu.created_at', 'DESC');

        return $qb;
    }

    /**
     * @param $userId
     * @param $domainId
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findSkinsByUserIdAndDomainId($userId, $domainId)
    {
        $dbal = $this->getEntityManager()->getConnection();
        $stmt = $dbal->prepare("
        SELECT 
          s.name as skin_name, 
          s.image as steam_image, 
          s.steam_price as price, 
          s.rarity_id
        FROM cases_skins_pick_up_user_pubg cspuu
          LEFT JOIN skins_pubg s ON cspuu.skins_id = s.id
          LEFT JOIN cases_domain cd ON cspuu.cases_domain_id = cd.id
        WHERE 
          cspuu.user_id = :user_id
          AND cd.uuid = :domain_id
        ");
        $stmt->bindParam('user_id', $userId, \PDO::PARAM_INT);
        $stmt->bindParam('domain_id', $domainId, \PDO::PARAM_INT);
        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }

    /**
     * @param $id
     * @param $user
     * @param $domainId
     * @return mixed|null
     */
    public function findOneSkinsByIdAndUserIdAndDomainId($id, $user, $domainId)
    {
        $qb = $this->createQueryBuilder('cspuu');
        $qb
            ->leftJoin('cspuu.casesDomain', 'cd')
            ->where('cspuu.id = :id')
            ->andWhere('cspuu.user = :user')
            ->andWhere('cd.uuid = :domain_id')
            ->setParameter('id', $id)
            ->setParameter('user', $user)
            ->setParameter('domain_id', $domainId);

        try {
            return $qb->getQuery()->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }
}
