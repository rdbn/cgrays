services:
    # AdminBundle
    admin.service.cases_list:
        class: AdminBundle\Service\CasesListService
        arguments: ['@doctrine.orm.default_entity_manager']

    admin.listener.cases:
        class: AdminBundle\EventListener\CasesPersistSubscriber
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    # SteamBundle
    apikey_authenticator:
        class:  AppBundle\Security\ApiKeyAuthenticator
        public: false

    steam.user_provider:
        class: AppBundle\Security\SteamUserProvider
        arguments: ['@doctrine.orm.default_entity_manager', '@app.service.user_service', '%steam.user_class%']

    # AppBundle
    app.listener.user:
        class: AppBundle\EventListener\UserPersistSubscriber
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    app.service.user_service:
        class: AppBundle\Services\SteamUserService
        arguments: ['@steam.api_steam_profile', '@app.service.upload_image']

    app.form.message_type_form:
        class: AppBundle\Form\MessageTypeForm
        arguments: ['@security.token_storage']
        tags:
            - { name: form.type }

    app.service.upload_image:
        class: AppBundle\Services\UploadImageService
        public: false
        arguments: ['%steam_community_image_url%']

    app.service.steam_user_inventory:
        class: AppBundle\Services\SteamUserInventoryHandler
        arguments:
            - '@app.repository.skins_price'
            - '@steam.api_inventory'
            - '@snc_redis.default'
            - '%steam_community_image_url%'

    app.service.save_sell_skins_handler:
        class: AppBundle\Services\SellSkins\AddSellHandler
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@doctrine.dbal.default_connection'
            - '@snc_redis.default'
            - '@app.service.upload_image'
            - '@logger'

    # Ввод/Вывод денег и оплата товара
    app.service.payment.pay_in_out:
        class: AppBundle\Services\Payment\PayInOutService
        arguments: ['@doctrine.dbal.default_connection', '@app.repository.balance_user', '@logger']

    app.service.payment.hot_payment_skins:
        class: AppBundle\Services\Payment\HotPaymentSkinsService
        arguments:
            - '@doctrine.dbal.default_connection'
            - '@app.repository.balance_user'
            - '@app.repository.skins_price'
            - '@old_sound_rabbit_mq.trade_product_producer'
            - '@logger'

    app.service.payment.basket_payment_skins:
        class: AppBundle\Services\Payment\BasketPaymentSkinsService
        arguments:
            - '@doctrine.dbal.default_connection'
            - '@app.repository.balance_user'
            - '@app.repository.skins_price'
            - '@old_sound_rabbit_mq.trade_product_producer'
            - '@logger'

    # repository service
    app.repository.user:
        class: AppBundle\Repository\UserRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\User

    app.repository.skins:
        class: AppBundle\Repository\SkinsRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\Skins

    app.repository.skins_price:
        class: AppBundle\Repository\SkinsPriceRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\SkinsPrice

    app.repository.balance_user:
        class: AppBundle\Repository\BalanceUserRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\BalanceUser

    app.repository.currency:
        class: AppBundle\Repository\CurrencyRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\Currency

    app.repository.failed_links_skins:
        class: AppBundle\Repository\FailedLinksSkinsRepository
        arguments: ['@doctrine.dbal.default_connection']

    # twig function
    app.twig_extension:
        class: AppBundle\Twig\AppExtension
        public: false
        tags:
            - { name: twig.extension }

    # ApiBundle
    api.service.validator_item_sell:
        class: ApiBundle\Service\ValidatorItemSellService
        arguments: ['@validator']

    api.service.news_like:
        class: ApiBundle\Service\NewsLikeService
        arguments: ['@doctrine.orm.entity_manager', '@security.token_storage', '@logger']

    api.service.news_comment:
        class: ApiBundle\Service\NewsCommentService
        arguments: ['@doctrine.dbal.default_connection', '@security.token_storage', '@logger']

    api.service.case_open:
        class: ApiBundle\Service\CaseOpenHandler
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@doctrine.dbal.default_connection'
            - '@security.token_storage'
            - '@api.service.games'
            - '@logger'

    api.service.cases_user_sell_skins:
        class: ApiBundle\Service\CasesUserSellSkinsHandler
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@doctrine.dbal.default_connection'

    api.service.cases_user_pick_up_skins:
        class: ApiBundle\Service\CasesUserPickUpSkinsHandler
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@doctrine.dbal.default_connection'

    api.service.cases_contract:
        class: ApiBundle\Service\CasesContractHandler
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@doctrine.dbal.default_connection'

    api.service.games:
        class: ApiBundle\Service\GamesService
        arguments:
            - '@snc_redis.default_client'

    api.service.add_skins_trade:
        class: ApiBundle\Service\SkinsTrade\AddSkinsTradeHandler
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@doctrine.dbal.default_connection'

    api.service.remove_skins_trade:
        class: ApiBundle\Service\SkinsTrade\RemoveSkinsTradeHandler
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@doctrine.dbal.default_connection'

    api.validator.domain_id:
        class: ApiBundle\Validator\DomainIdValidator
        arguments: ['@doctrine.orm.entity_manager']
        tags:
            - { name: validator.constraint_validator, alias: api.validator.domain_id }

    api.validator.currency:
        class: ApiBundle\Validator\CurrencyValidator
        arguments: ['@doctrine.orm.entity_manager']
        tags:
            - { name: validator.constraint_validator, alias: api.validator.currency }

    # ProcessingBundle
    processing.is_online.is_online_handler:
        class: ProcessingBundle\OnlineUser\IsOnlineHandler
        arguments: ['@doctrine.dbal.default_connection', '@app.repository.user', '@logger']

    processing.parser.skins_handler:
        class: ProcessingBundle\Parser\SkinsHandler
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@doctrine.dbal.default_connection'
            - '@guzzle.client.steam'
            - '@app.service.upload_image'
            - '@logger'
            - '%steam.steam_community_url%'

    processing.parser.error_handler:
        class: ProcessingBundle\Parser\ErrorHandler
        arguments:
            - '@doctrine.dbal.default_connection'
            - '@logger'

    processing.service.parser_market_handler:
        class: ProcessingBundle\Services\ParserMarketHandler
        arguments:
            - '@app.repository.skins'
            - '@old_sound_rabbit_mq.parser_price_producer'
            - '@old_sound_rabbit_mq.parser_skins_producer'
            - '@steam.api_market'
            - '@logger'

    # listener
    app.switch_user_listener:
        class: AppBundle\EventListener\SwitchUserListener
        tags:
            - { name: kernel.event_listener, event: security.switch_user, method: onSwitchUser }

    app.currency_listener:
        class: AppBundle\EventListener\AuthenticationListener
        arguments: ['@app.repository.currency']
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onAuthenticationSuccess
             }